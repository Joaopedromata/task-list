// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Task {
  id        Int     @id @default(autoincrement())
  name      String
  completed Boolean @default(false)
  board_id  Int
  uuid      String  @unique @default(uuid())

  board     Board       @relation(fields: [board_id], references: [id], onDelete: Cascade)
  BoardTask BoardTask[]

  @@map("tasks")
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  name     String
  password String
  uuid     String @unique @default(uuid())

  BoardUser BoardUser[]

  @@map("users")
}

model Board {
  id   Int    @id @default(autoincrement())
  name String
  uuid String @unique @default(uuid())

  BoardUser BoardUser[]
  Task      Task[]
  BoardTask BoardTask[]

  @@map("boards")
}

model BoardUser {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())

  board_id Int
  user_id  Int

  user  User  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  board Board @relation(fields: [board_id], references: [id], onDelete: Cascade)

  @@unique([user_id, board_id])
  @@map("users_boards")
}

model BoardTask {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())

  board_id Int
  task_id  Int

  task  Task  @relation(fields: [task_id], references: [id], onDelete: Cascade)
  board Board @relation(fields: [board_id], references: [id], onDelete: Cascade)

  @@unique([task_id, board_id])
  @@map("boards_tasks")
}

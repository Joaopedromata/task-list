// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Task {
  id         Int      @id @default(autoincrement())
  uuid       String   @unique @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  name      String
  completed Boolean @default(false)
  board_id  Int

  board     Board       @relation(fields: [board_id], references: [id], onDelete: Cascade)
  BoardTask BoardTask[]

  @@map("tasks")
}

model User {
  id         Int      @id @default(autoincrement())
  uuid       String   @unique @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  email      String   @unique
  name       String
  password   String

  BoardUser BoardUser[]
  Financing Financing[]

  @@map("users")
}

model Board {
  id         Int      @id @default(autoincrement())
  uuid       String   @unique @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  name String

  BoardUser BoardUser[]
  Task      Task[]
  BoardTask BoardTask[]

  @@map("boards")
}

model BoardUser {
  id         Int      @id @default(autoincrement())
  uuid       String   @unique @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  board_id Int
  user_id  Int

  user  User  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  board Board @relation(fields: [board_id], references: [id], onDelete: Cascade)

  @@unique([user_id, board_id])
  @@map("users_boards")
}

model BoardTask {
  id         Int      @id @default(autoincrement())
  uuid       String   @unique @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  board_id Int
  task_id  Int

  task  Task  @relation(fields: [task_id], references: [id], onDelete: Cascade)
  board Board @relation(fields: [board_id], references: [id], onDelete: Cascade)

  @@unique([task_id, board_id])
  @@map("boards_tasks")
}

model Financing {
  id         Int      @id @default(autoincrement())
  uuid       String   @unique @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  user_id              Int
  description          String
  amount               Float
  installments         Int
  due_date_first       DateTime
  installment_amount   Float
  FinancingInstallment FinancingInstallment[]

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("financings")
}

model FinancingInstallment {
  id         Int      @id @default(autoincrement())
  uuid       String   @unique @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  amount       Float
  paid_at      DateTime?
  paid_amount  Float?
  financing_id Int
  due_date     DateTime

  financing Financing @relation(fields: [financing_id], references: [id], onDelete: Cascade)

  @@map("financing_installments")
}

model Habit {
  id         Int      @id @default(autoincrement())
  uuid       String   @unique @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  title    String
  weekDays HabitWeekDays[]
  DayHabit DayHabit[]

  @@map("habits")
}

model HabitWeekDays {
  id         Int      @id @default(autoincrement())
  uuid       String   @unique @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  habit_id Int
  week_day Int

  habit Habit @relation(fields: [habit_id], references: [id])

  @@unique([habit_id, week_day])
  @@map("habit_week_days")
}

model Day {
  id         Int      @id @default(autoincrement())
  uuid       String   @unique @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  date DateTime

  dayHabits DayHabit[]

  @@unique([date])
  @@map("days")
}

model DayHabit {
  id         Int      @id @default(autoincrement())
  uuid       String   @unique @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  day_id   Int
  habit_id Int

  day   Day   @relation(fields: [day_id], references: [id])
  habit Habit @relation(fields: [habit_id], references: [id])

  @@unique([day_id, habit_id])
  @@map("day_habits")
}
